import framebuf
import display
import time

#These will be frozen in Flash
bat_chrg_s = b'\x3f\xff\xf0\x20\x00\x10\xe0\xe0\x10\xe3\xef\xd0\xef\xdf\x10\xe0\x1c\x10\x20\x00\x10\x3f\xff\xf0'
flash_w_s = b"\x1c\x00\x22\x00\x2a\x00\x49\x00\x41\x00\x88\x80\x80\x80\xFF\x80"
logo_s = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\xff\x80\x00\x00\x3f\xe0\x00\x00\x00\x1e\x00\x00\x00\x00\x00\x00\xff\x80\x00\x00\x3f\xf8\x00\x00\x00\x1e\x00\x00\x07\x80\x00\x00\xff\x80\x00\x00\x3f\xf8\x00\x00\x00\x1e\x00\x00\x07\x80\x00\x00\xff\x80\x00\x00\x3c\x7c\x00\x00\x00\x1e\x00\x00\x07\x80\x1c\x01\xff\x80\x1c\x00\x3c\x3c\x1f\x80\x7e\x1e\x7c\x3f\x0f\xf0\x3f\x01\xff\xc0\x7e\x00\x3c\x3c\x3f\xc0\xff\x1e\x78\x7f\x8f\xf0\x7f\x8f\xff\xf0\xff\x00\x3c\x7c\x79\xe1\xe3\x1e\xf0\xf3\xc7\x80\xff\xff\xff\xff\xff\x80\x3f\xf8\xf0\xf3\xc1\x1f\xe1\xe3\xc7\x81\xff\xff\xff\xff\xff\x80\x3f\xf0\xf0\xf3\xc0\x1f\xc1\xff\xc7\x80\xff\xff\xff\xff\xff\x80\x3f\xe0\xf0\xf3\xc0\x1f\xc1\xff\xc7\x80\xff\xff\xff\xff\xff\x00\x3c\x00\xf0\xf3\xc0\x1f\xe1\xe0\x07\x80\x7f\xff\xff\xff\xff\x00\x3c\x00\xf0\xf3\xc1\x1e\xf1\xe0\x47\x80\x3f\xff\xff\xff\xfe\x00\x3c\x00\x79\xe1\xe3\x1e\x70\xf0\xc7\x80\x1f\xff\xff\xff\xfc\x00\x3c\x00\x3f\xc0\xff\x1e\x78\x7f\xc3\xf0\x1f\xff\xff\xff\xfc\x00\x3c\x00\x1f\x80\x7e\x1e\x7c\x3f\x81\xf0\x1f\xff\xff\xff\xfc\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xff\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xc3\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\x00\x7f\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xfe\x00\x3f\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xfc\x00\x1f\xff\xf8\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xfc\x00\x1f\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xf8\x00\x1f\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xf8\x00\x0f\xff\xfe\x00\x00\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xf8\x00\x0f\xff\xfe\x07\xf0\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xf8\x00\x0f\xff\xfe\x0f\xf8\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xf8\x00\x1f\xff\xfe\x1f\xfc\x00\x00\x00\x00\x00\x00\x00\x3f\xff\xfc\x00\x1f\xff\xfe\x3e\x3e\x00\x00\x00\x00\x00\x00\x00\x0f\xff\xfc\x00\x1f\xff\xf8\x7c\x1f\x1e\xe1\xde\x1f\xc0\xf7\x80\x00\xff\xfe\x00\x3f\xff\x00\x78\x0f\x1f\xe7\xfe\x1f\xe0\xff\x80\x00\x7f\xff\x00\x7f\xff\x00\x78\x0f\x1e\x07\x9e\x11\xf0\xf3\xc0\x00\x3f\xff\x80\xff\xfe\x00\x78\x0f\x1e\x0f\x1e\x00\xf0\xf3\xc0\x00\x3f\xff\x80\xff\xfe\x00\x78\x0f\x1e\x0f\x1e\x07\xf0\xf3\xc0\x00\x3f\xff\x80\xff\xfc\x00\x78\x0f\x1e\x0f\x1e\x1f\xf0\xf3\xc0\x00\x1f\xff\x00\xff\xfc\x00\x7c\x1f\x1e\x0f\x1e\x3e\xf0\xf3\xc0\x00\x1f\xff\x00\x7f\xfc\x00\x3e\x3e\x1e\x0f\x1e\x3c\xf0\xf3\xc0\x00\x3f\xff\x00\x7f\xfe\x00\x1f\xfc\x1e\x0f\x9e\x3c\xf0\xf3\xc0\x00\x7f\xfe\x00\x3f\xff\x00\x0f\xf8\x1e\x07\xfe\x3f\xf0\xf3\xc0\x00\xff\xfe\x00\x3f\xff\x00\x07\xf0\x1e\x03\xde\x1e\xf0\xf3\xc0\x00\xff\xfc\x00\x3f\xff\x80\x00\x00\x00\x00\x1e\x00\x00\x00\x00\x01\xff\xfc\x00\x1f\xff\x80\x00\x00\x00\x04\x3c\x00\x00\x00\x00\x00\xff\xf8\x00\x1f\xff\x80\x00\x00\x00\x07\xfc\x00\x00\x00\x00\x00\x7f\x98\x00\x0c\xff\x00\x00\x00\x00\x07\xf0\x00\x00\x00\x00\x00\x3f\x00\x00\x00\x7e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1c\x00\x00\x00\x1c\x00\x01\xe0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x08\x00\x02\x10\x3f\xc0\x00\x00\x00\x07\xff\x31\xbc\xf0\x1c\x71\xc2\x00\x04\xe8\x04\x40\x00\x00\x00\x00\x88\x31\xa2\x80\x22\x8a\x2e\x00\x05\x08\x04\x78\xe7\xb8\xe3\x80\x88\x2a\xa2\x80\x02\x88\x22\x00\x05\x08\x04\x45\x14\x44\x14\x00\x8f\x2a\xa2\xf0\x04\x88\x42\x00\x04\xe8\x04\x45\x14\x44\xf3\x00\x88\x24\xbc\x80\x08\x88\x82\x00\x02\x10\x04\x45\x14\x45\x10\x80\x88\x24\xa0\x80\x10\x89\x02\x00\x01\xe0\x04\x44\xe4\x44\xf7\x00\x8f\x20\xa0\xf0\x3e\x73\xef\x80'

#These will not be frozen in Flash (limitation of Micropython)
bat_chrg = (bat_chrg_s, 20, 8)
flash_w = (flash_w_s, 9, 8)
logo = (logo_s, 128, 64)

def bits(n):
    "8-bit bit map iterator"
    return [(n>>i)&1 for i in range(7, -1, -1)]

def load_image(name):
    "takes a filename, returns a framebuffer"
    filename = "img/"+name+".pbm"
    try:
        f = open(filename, 'rb')
    except:
        raise ImportError("Error opening file: " + filename)
    if b'P4\n' != f.readline():                         # Magic number
        pass
        raise ImportError("Invalid file: " + filename)
    f.readline()                                       # Creator comment
    width, height = list(int(j) for j in f.readline()[:-1].decode().split(" ")) # Dimensions
    data = bytearray(f.read())
    f = framebuf.FrameBuffer(data, width, height, framebuf.MONO_HLSB)
    return f, width, height


def disp_img(buf, w, h, extra=None):
    "Display a framebuffer image as ASCII art in the console. Usage: disp_img(*logo)"
    x=0
    y=0
    for i in buf:
        for b in bits(i):
            print(".X"[b], end="")
            x+=1
            if x>=w-1:
                break
        if x>=w-1:
            print("")
            x=0
            y+=1
    print("Image: {} bytes, width={}, height={}, actual height={}".format(len(buf), w, h, y))
            
def disp_img2(file):
    "Display a PBM file as ASCII art in the console"
    f, w, h = load_image(file)
    for y in range(0, h):
        for x in range(0, w):
            print(".X"[f.pixel(x,y)], end="")
        print("")

class BitStr:
    def __init__(self):
        self.buf = bytearray()
        self.byte = 0
        self.count = 0
        
    def push(self, b):
        self.byte = (self.byte<<1)+(b&1)
        self.count += 1
        if self.count == 8:
            self.buf.append(self.byte)
            self.count=0
            self.byte = 0
            
    def newline(self):
        if self.count:
            self.buf.append(self.byte<<(8-self.count))
        self.byte  = 0
        self.count = 0
        
    def print(self):
        end = lambda a: "0"+hex(a)[-1:] if a<16 else hex(a)[-2:]
        for v in self.buf:
            print("\\x"+end(v), end="")

def convert(file):
    "Convert a PBM file into a one-liner of Python code for generating the corresponding framebuf object"
    print( "_xx_s = b'", end="")
    b = BitStr()
    f, w, h = display.load_image(file)
    for y in range(0, h):
        for x in range(0, w):
            b.push(f.pixel(x,y))
        b.newline()
    b.print()
    print("'\nxx = (_xx_s, {},{})".format(w, h))



def disp(fb, h, w):
    """display a bytearray object to the OLED display
    example:
    >>> disp(*logo)
    """
    #TODO: write a low-level bit-blitting function to copy a picture from flash into the framebuffer directly

    f=framebuf.FrameBuffer(bytearray(fb), h, w, framebuf.MONO_HLSB)
    d=display.Display()
    d.clear()
    d.disp.framebuf.blit(f,0,0)
    d.disp.show()
